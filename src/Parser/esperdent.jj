/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. esperdent.jj */
/*@egen*/options {
               
  KEEP_LINE_COLUMN = false;
                 
}

PARSER_BEGIN(EsperdentParser)

package parser;

/** An Esperdent Grammar. */
public class EsperdentParser/*@bgen(jjtree)*/implements EsperdentParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTEsperdentParserState jjtree = new JJTEsperdentParserState();

/*@egen*/

  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    EsperdentParser t = new EsperdentParser(System.in);
    try {
      ASTStart n = t.Start();
      n.dump(">");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(EsperdentParser)


SKIP :
{
  " "
|
  "\t"
|
  "\n"
|
  "\r"
|
  <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
|
  <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN [IGNORE_CASE]:
{
  < CREATE  : "create" >
|
  < SCHEMA  : "schema" >
|
  < STREAM: "stream" >
|
  < INSERT  : "insert" >
|
  < INTO  : "into" >
|
  < SELECT  : "select" >
|
  < FROM : "from" >
|
  < WHERE   : "where" >
|
  < AS   : "as" >
|
  < WINDOW : "window" >
|
  < AND  : "and" >
|
  < OR   : "or" >
|
  < NOT  : "not" >
|
  < COMMA     : "," >
|
  < WIN_LENGTH  : "win:length" >
|
  < WIN_TIME  : "win:time" >
|
  < WIN_TIME_BATCH  : "win:time_batch" >
|
  < ROWS : "rows" >
|
  < RANGE : "range" >
}

/** Type */
TOKEN [IGNORE_CASE]:
{
  < INT : "int" >
|
  < FLOAT : "float" >
|
  < TIMESTAMP : "timestamp" >
}

/** Time units */
TOKEN :
{
  < SECONDS : "seconds" | "second" | "sec" >
|
  < MINUTES : "minutes" | "minute" | "min" >
|
  < HOURS   : "hours" | "hour" | "hr" >
|
  < DAYS    : "days" | "day" | "d" >
}


TOKEN :
{
  < STRING: "\"" (~["\""] | "\\\"")*  "\"" >
|
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

TOKEN:
{
  < INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}

/** Comparison */
TOKEN :
{
  < EQ : "=" >
|
  < GT : ">" >
}

/** Main production */
ASTStart Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Esperdent()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Esperdent()       : {}
{
  CreateClause()
|
  InsertClause()
|
  Query()
}


/** Create clause */
void CreateClause()               : {/*@bgen(jjtree) CreateClause */
  ASTCreateClause jjtn000 = new ASTCreateClause(JJTCREATECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CreateClause */
  try {
/*@egen*/
  <CREATE> <STREAM> Name() "(" AttributeDefList() ")" ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AttributeDefList()                  : {/*@bgen(jjtree) AttributeDefList */
  ASTAttributeDefList jjtn000 = new ASTAttributeDefList(JJTATTRIBUTEDEFLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AttributeDefList */
  try {
/*@egen*/
  AttributeDefinition() (<COMMA> AttributeDefinition())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AttributeDefinition()                      : {/*@bgen(jjtree) AttributeDefinition */
  ASTAttributeDefinition jjtn000 = new ASTAttributeDefinition(JJTATTRIBUTEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AttributeDefinition */
  try {
/*@egen*/
  Name() AttributeType()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AttributeType()                : {/*@bgen(jjtree) AttributeType */
  ASTAttributeType jjtn000 = new ASTAttributeType(JJTATTRIBUTETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AttributeType */
  try {
/*@egen*/
  <INT>
|
  <FLOAT>
|
  <TIMESTAMP>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** End of create clause */


/** Insert clause */
void InsertClause()               : {/*@bgen(jjtree) InsertClause */
  ASTInsertClause jjtn000 = new ASTInsertClause(JJTINSERTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InsertClause */
  try {
/*@egen*/
  <INSERT> <INTO> Name() ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/** End of insert clause */


/** Query clause */
void Query()        : {/*@bgen(jjtree) Query */
  ASTQuery jjtn000 = new ASTQuery(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Query */
  try {
/*@egen*/
  SelectClause() FromClause() WhereClause() ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** Select clause */
void SelectClause()               : {/*@bgen(jjtree) SelectClause */
  ASTSelectClause jjtn000 = new ASTSelectClause(JJTSELECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectClause */
  try {
/*@egen*/
  <SELECT> SelectList()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SelectList()             : {/*@bgen(jjtree) SelectList */
  ASTSelectList jjtn000 = new ASTSelectList(JJTSELECTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectList */
  try {
/*@egen*/
  "*"
|
  Attribute() (LOOKAHEAD(2) <COMMA> Attribute())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Attribute()            : {/*@bgen(jjtree) Attribute */
  ASTAttribute jjtn000 = new ASTAttribute(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Attribute */
  try {
/*@egen*/
  <IDENTIFIER>
  ( LOOKAHEAD(2) "." <IDENTIFIER>
  )?/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/** End of select clause */

/** From clause. */
void FromClause()             : {/*@bgen(jjtree) FromClause */
  ASTFromClause jjtn000 = new ASTFromClause(JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FromClause */
  try {
/*@egen*/
  <FROM> FromList()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ //(<COMMA> "[" Filter() "]")*
}

void FromList()           : {/*@bgen(jjtree) FromList */
  ASTFromList jjtn000 = new ASTFromList(JJTFROMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FromList */
  try {
/*@egen*/
  Stream() (<COMMA> Stream())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Stream()         : {/*@bgen(jjtree) Stream */
  ASTStream jjtn000 = new ASTStream(JJTSTREAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stream */
  try {
/*@egen*/
  Name() (WindowSpec())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WindowSpec()             : {/*@bgen(jjtree) WindowSpec */
  ASTWindowSpec jjtn000 = new ASTWindowSpec(JJTWINDOWSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WindowSpec */
  try {
/*@egen*/
  <WINDOW> "(" WindowFrame() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WindowFrame()              : {/*@bgen(jjtree) WindowFrame */
  ASTWindowFrame jjtn000 = new ASTWindowFrame(JJTWINDOWFRAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WindowFrame */
  try {
/*@egen*/
  WindowFrameUnits() WindowFrameStart()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WindowFrameUnits()                   : {/*@bgen(jjtree) WindowFrameUnits */
  ASTWindowFrameUnits jjtn000 = new ASTWindowFrameUnits(JJTWINDOWFRAMEUNITS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WindowFrameUnits */
  try {
/*@egen*/
  <ROWS> | <RANGE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WindowFrameStart()                   : {/*@bgen(jjtree) WindowFrameStart */
  ASTWindowFrameStart jjtn000 = new ASTWindowFrameStart(JJTWINDOWFRAMESTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WindowFrameStart */
  try {
/*@egen*/
  <INTEGER_LITERAL> (Units())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Units()        : {/*@bgen(jjtree) Units */
  ASTUnits jjtn000 = new ASTUnits(JJTUNITS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Units */
  try {
/*@egen*/
  <SECONDS>
|
  <MINUTES>
|
  <HOURS>
|
  <DAYS>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** Where clause */
void WhereClause()       : {}
{/*@bgen(jjtree) WhereClause */
  {
    ASTWhereClause jjtn001 = new ASTWhereClause(JJTWHERECLAUSE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (<WHERE> Cond())/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/                      
|
  {}
}

void Cond()       : {}
{
  LOOKAHEAD(CondPrime() (<AND> Cond())+)/*@bgen(jjtree) CondAnd */
  {
    ASTCondAnd jjtn001 = new ASTCondAnd(JJTCONDAND);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (CondPrime() (LOOKAHEAD(<AND> Cond()) <AND> Cond())+)/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/         
|
  LOOKAHEAD(CondPrime() (<OR>  Cond())+)/*@bgen(jjtree) CondOr */
  {
    ASTCondOr jjtn002 = new ASTCondOr(JJTCONDOR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  (CondPrime() (LOOKAHEAD(<AND> Cond()) <OR>  Cond())+)/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/        
|
  LOOKAHEAD(CondPrime())
  CondPrime()                                             //#Epsilon
}

void CondPrime()       : {}
{
  LOOKAHEAD(Attribute() <EQ>)/*@bgen(jjtree) CondEq */
  {
    ASTCondEq jjtn001 = new ASTCondEq(JJTCONDEQ);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (Attribute() <EQ> Attribute())/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/        
|
  LOOKAHEAD(Attribute() <EQ>)/*@bgen(jjtree) CondGt */
  {
    ASTCondGt jjtn002 = new ASTCondGt(JJTCONDGT);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  (Attribute() <GT> Attribute())/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/        
}
/** End of where clause */

void Name()       : {/*@bgen(jjtree) Name */
                      ASTName jjtn000 = new ASTName(JJTNAME);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Name */
  try {
/*@egen*/
  <IDENTIFIER>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { jjtn000.name = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Integer()          : {/*@bgen(jjtree) Integer */
                            ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  <INTEGER_LITERAL>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { jjtn000.number = Integer.parseInt(t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
